<?php

/**
 * @file
 * This module allows you to add Pager blocks to navigate through entities.
 */

/**
 * Implements hook_autoload_info().
 */
function entity_pager_autoload_info() {
  return array(
    'EntityPagerViewsPluginStyle' => 'views/plugins/EntityPagerViewsPluginStyle.inc',
    'EntityPager' => 'includes/EntityPager.inc',
    'EntityPagerSetup' => 'includes/EntityPagerSetup.inc',
    'EntityPagerAdvice' => 'includes/EntityPagerAdvice.inc',
    'EntityPagerOut' => 'includes/EntityPagerOut.inc',
  );
}

/**
 * Implements hook_views_api().
 *
 * This one is used as the base to reduce errors when updating.
 */
function entity_pager_views_api() {
  return array(
    'api' => '3.0',
    'path' => backdrop_get_path('module', 'entity_pager') . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function entity_pager_theme() {

  $themes = array();
  $themes['entity_pager'] = array(
    'variables' => array(
      'list' => array(),
    ),
    'template' => 'entity_pager',
  );
  return $themes;
}

/**
 * Implements template_preprocess_hook().
 *
 * Added a minimalistic amount of CSS to the page to style Entity Page.
 * A minimalistic amount of CSS has deliberately only been added so it is easy
 * to override the CSS in the theme layer.
 *
 * @param array $variables
 *   An associative array of $variables passed into template.
 */
function template_preprocess_entity_pager(array &$variables) {
  backdrop_add_css(backdrop_get_path('module', 'entity_pager') . '/css/entity_pager.css');
}
